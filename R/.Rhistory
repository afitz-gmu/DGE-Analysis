& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
cutoff = 0.05
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
fc <- reshape2::acast(data=df ,genes ~Method, value.var="FoldChange")
colnames(fc) <-paste(colnames(fc),"FoldChange")
Range= t(apply(fc,1,range))
colnames(Range)<-c("Min","Max")
fc<-cbind(fc, Range)
pv <- reshape2::acast(data=df ,genes ~Method, value.var="pvalue")
colnames(pv) <-paste(colnames(pv),"pvalue")
Range= t(apply(pv,1,range))
colnames(Range)<-c("Min","Max")
pv<-cbind(pv, Range)
res<-cbind(fc,pv)
return(res)
res
#' plot and get summary
#'
#' @param DE list of Differentially Expressed Genes from Various methods.
#' @param FoldChange is cuoff to mark genes as Differentially expressed
#' @param cutoff is either pvalue of FDR cutoff for filtering
#' @param type.sig vector \code{c('p', 'FDR')} default \code{'p'}
#' @importFrom ggplot2 ggplot
#' @importFrom reshape2 acast
#' @return data frame of Deferentially expressed genes counts in various methods
#'
#' @examples
#'
#' data("DEG")
#' DE.list<-list("edger" =dge_edger, "edgerql" = dge_edgerql,
#' "voom" = dge_voom )
#' DGE.CI(DE=DE.list , FoldChange=1.2 , cutoff =0.01 , type.sig ="FDR")
#'
#'
#' @export
#'
DGE.CI <- function(DE  , FoldChange = 0 , cutoff=0.05 , type.sig='p') {
stopifnot(is.numeric(FoldChange) , is.numeric(cutoff))
FC <- c("log2FoldChange", "logFC")
pv <-c( "pvalue", "P.Value", "PValue")
if (type.sig=="FDR"){
pv <-c( "FDR", "padj", "adj.P.Val")
}
names<-names(DE)
DEG.df <- data.frame(FoldChange = numeric(), pvalue = numeric(),
Regulation = character() , Method = character() ,
genes = character())
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
}
DGE.CI(DE)
Range= t(apply(fc,1,range))
colnames(Range)<-c("Min","Max")
fc<-cbind(fc, Range)
pv <- reshape2::acast(data=df ,genes ~Method, value.var="pvalue")
colnames(pv) <-paste(colnames(pv),"pvalue")
Range= t(apply(pv,1,range))
colnames(Range)<-c("Min","Max")
pv<-cbind(pv, Range)
res<-cbind(fc,pv)
DGE.CI <- function(DE  , FoldChange = 0 , cutoff=0.05 , type.sig='p') {
stopifnot(is.numeric(FoldChange) , is.numeric(cutoff))
FC <- c("log2FoldChange", "logFC")
pv <-c( "pvalue", "P.Value", "PValue")
if (type.sig=="FDR"){
pv <-c( "FDR", "padj", "adj.P.Val")
}
names<-names(DE)
DEG.df <- data.frame(FoldChange = numeric(), pvalue = numeric(),
Regulation = character() , Method = character() ,
genes = character())
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
fc <- reshape2::acast(data=df ,genes ~Method, value.var="FoldChange")
colnames(fc) <-paste(colnames(fc),"FoldChange")
Range= t(apply(fc,1,range))
colnames(Range)<-c("Min","Max")
fc<-cbind(fc, Range)
pv <- reshape2::acast(data=df ,genes ~Method, value.var="pvalue")
colnames(pv) <-paste(colnames(pv),"pvalue")
Range= t(apply(pv,1,range))
colnames(Range)<-c("Min","Max")
pv<-cbind(pv, Range)
res<-cbind(fc,pv)
return(res)
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
}
DGE.CI(DE)
res <- as.data.frame(res)
#'
DGE.CI <- function(DE  , FoldChange = 0 , cutoff=0.05 , type.sig='p') {
stopifnot(is.numeric(FoldChange) , is.numeric(cutoff))
FC <- c("log2FoldChange", "logFC")
pv <-c( "pvalue", "P.Value", "PValue")
if (type.sig=="FDR"){
pv <-c( "FDR", "padj", "adj.P.Val")
}
names<-names(DE)
DEG.df <- data.frame(FoldChange = numeric(), pvalue = numeric(),
Regulation = character() , Method = character() ,
genes = character())
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
fc <- reshape2::acast(data=df ,genes ~Method, value.var="FoldChange")
colnames(fc) <-paste(colnames(fc),"FoldChange")
Range= t(apply(fc,1,range))
colnames(Range)<-c("Min","Max")
fc<-cbind(fc, Range)
pv <- reshape2::acast(data=df ,genes ~Method, value.var="pvalue")
colnames(pv) <-paste(colnames(pv),"pvalue")
Range= t(apply(pv,1,range))
colnames(Range)<-c("Min","Max")
pv<-cbind(pv, Range)
res<-cbind(fc,pv)
res <- as.data.frame(res)
return(res)
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
}
DGE.CI(DE)
DGE.CI <- function(DE  , FoldChange = 0 , cutoff=0.05 , type.sig='p') {
stopifnot(is.numeric(FoldChange) , is.numeric(cutoff))
FC <- c("log2FoldChange", "logFC")
pv <-c( "pvalue", "P.Value", "PValue")
if (type.sig=="FDR"){
pv <-c( "FDR", "padj", "adj.P.Val")
}
names<-names(DE)
DEG.df <- data.frame(FoldChange = numeric(), pvalue = numeric(),
Regulation = character() , Method = character() ,
genes = character())
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
fc <- reshape2::acast(data=df ,genes ~Method, value.var="FoldChange")
colnames(fc) <-paste(colnames(fc),"FoldChange")
Range= t(apply(fc,1,range))
colnames(Range)<-c("Min","Max")
fc<-cbind(fc, Range)
pv <- reshape2::acast(data=df ,genes ~Method, value.var="pvalue")
colnames(pv) <-paste(colnames(pv),"pvalue")
Range= t(apply(pv,1,range))
colnames(Range)<-c("Min","Max")
pv<-cbind(pv, Range)
res<-cbind(fc,pv)
res <- as.data.frame(res)
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
return(res)
}
DGE.CI(DE)
remotes::install_github(repo="afitz-gmu/DGE_Calculator", build_opts = c("--no-resave-data", "--no-manual"))
DGE.CI.Plot(DE=DGE.list , FoldChange=1.2 , cutoff =0.05 , type.sig ="p")
remotes::install_github(repo="afitz-gmu/DGE-Analysis", build_opts = c("--no-resave-data", "--no-manual"))
remotes::install_github(repo="afitz-gmu/DGE-Analysis", build_opts = c("--no-resave-data", "--no-manual"))
DGE.CI.Plot <- function(DE  , FoldChange = 0 , cutoff=0.05 , type.sig='p') {
stopifnot(is.numeric(FoldChange) , is.numeric(cutoff))
FC <- c("log2FoldChange", "logFC")
pv <-c( "pvalue", "P.Value", "PValue")
if (type.sig=="FDR"){
pv <-c( "FDR", "padj", "adj.P.Val")
}
names<-names(DE)
DEG.df <- data.frame(FoldChange = numeric(), pvalue = numeric(),
Regulation = character() , Method = character() ,
genes = character())
for(name in names)
{
DERes<-DE[[name]]
DERes$Method <- name
DERes$genes <- row.names(DERes)
DERes$regulation<-"No"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] > FoldChange &
DERes[intersect(pv , colnames(DERes))] < cutoff] <- "UP"
DERes$regulation[DERes[intersect(FC , colnames(DERes))] < -1* FoldChange
& DERes[intersect(pv , colnames(DERes))] < cutoff] <- "DOWN"
df<-DERes[c(intersect(FC , colnames(DERes)), intersect(pv , colnames(DERes)),
"regulation" , "Method" ,"genes")]
colnames(df) <- colnames(DEG.df)
DEG.df <-rbind(DEG.df , df)
}
gn<-unique(DEG.df[DEG.df$Regulation != "No",]$genes)
df<-DEG.df[DEG.df$genes %in% gn ,]
df$FoldChange=exp(df$FoldChange)
fc <- reshape2::acast(data=df ,genes ~Method, value.var="FoldChange")
colnames(fc) <-paste(colnames(fc),"FoldChange")
ggplot2::ggplot(df , ggplot2::aes(x= as.numeric(as.factor(genes)) , y= -log10(pvalue) )) +
ggplot2::geom_point(ggplot2::aes(pch = Regulation  , color=Method , size=FoldChange) ) +
ggplot2::geom_smooth( method=loess , se=TRUE, color="red")  +
ggplot2::scale_x_discrete(labels=gn , name="genes") +
ggplot2::theme_minimal() +
ggplot2::ggtitle("95 confidence interval") +
ggplot2::geom_hline(yintercept=-log10(cutoff), col="cyan")
}
DGE.CI.Plot(DE)
shapiro.test(x, y)
shapiro.test(x)
?shapiro.test
shapiro.test(x)
x = rnorm(100)
y = runif(100)
shapiro.test(x)
shapiro.test(y)
(16/100)*(40/100)
(16/40)*(40/100)
(16/100)/(40/100)
states=row.names(USArrests)
states
states=row.names(USArrests)
states
names(USArrests )
apply(USArrests , 2, var)
pr.out=prcomp(USArrests, scale=TRUE)
pr.out$center
pr.out$scale
pr.out$rotation
dim(pr.out$x)
biplot(pr.out, scale=0)
pr.out$rotation=-pr.out$rotation
pr.out$x=-pr.out$x
biplot(pr.out, scale=0)
pr.out$sdev
pr.var=pr.out$sdev ^2
pr.var
pve=pr.var/sum(pr.var)
pve
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
a=c(1,2,8,-3)
cumsum(a)
set.seed (2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
km.out=kmeans(x,2,nstart=20)
km.out$cluster
plot(x, col=(km.out$cluster +1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
set.seed (4)
km.out=kmeans(x,3,nstart=20)
km.out
set.seed (3)
km.out=kmeans(x,3,nstart=1)
km.out$tot.withinss
km.out=kmeans(x,3,nstart=20)
km.out$tot.withinss
sd.data = scale(nci.data)
library(ISLR)
nci.labs=NCI60$labs
nci.data=NCI60$data
dim(nci.data)
nci.labs[1:4]
pr.out=prcomp(nci.data, scale=TRUE)
Cols=function(vec){
+ cols=rainbow(length(unique(vec)))
+ return(cols[as.numeric(as.factor(vec))]) }
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,
xlab="Z1",ylab="Z2")
Cols=function(vec){
+ cols=rainbow(length(unique(vec)))
+ return(cols[as.numeric(as.factor(vec))]) }
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,
xlab="Z1",ylab="Z2")
Cols=function(vec){
cols=rainbow(length(unique(vec)))
return(cols[as.numeric(as.factor(vec))]) }
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19, xlab="Z1",ylab="Z2")
names(Smarket)
summary(Smarket)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
plot(Volume)
glm.fits=glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial)
summary(glm.fits)
coef(glm.fits)
summary(glm.fits)$coef
summary(glm.fits)$coef[,4]
glm.probs=predict(glm.fits,type="response")
glm.probs[1:10]
contrasts (Direction )
glm.pred=rep("Down",1250)
glm.pred[glm.probs >.5]="Up"
table(glm.pred,Direction)
(507+145) /1250
mean(glm.pred==Direction )
train=(Year <2005)
Smarket.2005= Smarket [! train ,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.fits=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial,subset=train)
glm.probs=predict(glm.fits,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs >.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fits=glm(Direction~Lag1+Lag2,data=Smarket ,family=binomial, subset=train)
glm.probs=predict(glm.fits,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs >.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
predict(glm.fits,newdata=data.frame(Lag1=c(1.2,1.5), Lag2=c(1.1,-0.8)),type="response")
sum(lda.pred$posterior[,1]>=.5)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket ,subset=train)
if (!require(ISLR))
{install.packages("ISLR")}
library(ISLR)
if (!require(MASS))
{install.packages("MASS")}
library(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket ,subset=train)
lda.fit
plot(lda.fit)
lda.pred=predict(lda.fit, Smarket.2005)
sum(lda.pred$posterior[,1]>=.5)
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
lda.class[1:20]
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket ,subset=train)
lda.fit
plot(lda.fit)
lda.pred=predict(lda.fit, Smarket.2005)
sum(lda.pred$posterior[,1]>=.5)
sum(lda.pred$posterior[,1]<.5)
lda.class=lda.pred$class
table(lda.class ,Direction.2005)
lda.pred$posterior[1:20,1]
lda.class[1:20]
sum(lda.pred$posterior[,1]>.9)
mean(qda.class==Direction .2005)
qda.fit=qda(Direction~Lag1+Lag2,data=Smarket ,subset=train)
qda.fit
qda.class=predict(qda.fit,Smarket.2005)$class
table(qda.class ,Direction.2005)
mean(qda.class==Direction.2005)
library(class)
train.X=cbind(Lag1 ,Lag2)[train ,]
test.X=cbind(Lag1,Lag2)[!train,]
train.Direction =Direction [train]
set.seed (1)
knn.pred=knn(train.X,test.X,train.Direction ,k=1)
table(knn.pred,Direction.2005)
knn.pred=knn(train.X,test.X,train.Direction ,k=3)
table(knn.pred,Direction.2005)
mean(knn.pred==Direction.2005)
dim(Caravan)
attach(Caravan)
summary(Purchase)
standardized.X=scale(Caravan [,-86])
var ( Caravan [ ,1])
var ( Caravan [ ,2])
var(standardized.X[,1])
var(standardized.X[,2])
test =1:1000
train.X=standardized.X[-test ,]
test.X=standardized.X[test ,]
train.Y=Purchase [-test]
test.Y=Purchase [test]
set.seed (1)
knn.pred=knn(train.X,test.X,train.Y,k=1)
mean(test.Y!=knn.pred)
mean(test.Y!="No")
table(knn.pred,test.Y)
knn.pred=knn(train.X,test.X,train.Y,k=3)
table(knn.pred,test.Y)
knn.pred=knn(train.X,test.X,train.Y,k=5)
table(knn.pred,test.Y)
glm.fits=glm(Purchase~.,data=Caravan ,family=binomial, subset=-test)
glm.pred=rep("No",1000)
glm.pred[glm.probs >.25]=" Yes"
table(glm.pred,test.Y)
library(BiocManager)
library(ISLR)
data(NCI60)
data(NCI60)
nci.labs=NCI60$labs
nci.data=NCI60$data
View(nci.data)
View(NCI60)
nci.labs
devtools::check()
setwd("~/Documents/GitHub/DGE-Analysis/R")
devtools::check(~/Documents/GitHub/DGE-Analysis/R)
devtools::check(DGE.CI.Plot)
devtools::check(DGE.CI.Plot.R)
devtools::check(R)
devtools::check(DGE-Analysis)
Devtools::load_all()
library(devtools)
devtools::load_all()
